 

-- 1. 데이터베이스 만들기
CREATE DATABASE IF NOT EXISTS prewatch_db
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

-- 2. 사용할 DB 선택
USE prewatch_db;

-- 3. 기존 테이블 삭제 (자식 → 부모 순서)
DROP TABLE IF EXISTS movie_genres;          -- 영화-장르 매핑
DROP TABLE IF EXISTS movie_actors;          -- 영화-배우 연결
DROP TABLE IF EXISTS actors;                -- 배우 테이블
DROP TABLE IF EXISTS movie_images;          -- 영화-이미지 연결
DROP TABLE IF EXISTS admin_banner_movies;   -- 관리자 추천 배너
DROP TABLE IF EXISTS user_reviews;          -- 유저 리뷰
DROP TABLE IF EXISTS user_carts;            -- 유저 찜
DROP TABLE IF EXISTS movie_stats;           -- 영화별 통계
DROP TABLE IF EXISTS movies;                -- 영화 테이블
DROP TABLE IF EXISTS member;                -- 회원 테이블

-- 4. 회원 테이블
CREATE TABLE member (
    id VARCHAR(50) PRIMARY KEY,
    password VARCHAR(100) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    role VARCHAR(20) NOT NULL DEFAULT 'MEMBER',
    taste_title VARCHAR(255) DEFAULT '취향 탐색 중', -- 
    taste_report TEXT,
    taste_anomaly_score DECIMAL(10, 5) DEFAULT 0.0
);



INSERT INTO member (id, password, role) VALUES ('admin', '1234', 'ADMIN');
INSERT INTO member (id, password, role) VALUES ('member1', '1234', 'MEMBER');
INSERT INTO member (id, password, role) VALUES ('guest', '1234', 'MEMBER'); -- 테스트용 일반 회원 추가
INSERT INTO member (id, password, role) VALUES ('1', '1', 'MEMBER');
INSERT INTO member (id, password, role) VALUES ('2', '2', 'MEMBER');


-- 5. 영화 테이블 (수정)
CREATE TABLE movies (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    api_id VARCHAR(255) UNIQUE,
    title VARCHAR(255) NOT NULL,
    director VARCHAR(255),
    release_date DATE,
    year INT,
    genre VARCHAR(255),
    rating DECIMAL(3, 1) DEFAULT 0.0,
    violence_score_avg DECIMAL(3, 1) DEFAULT 0.0,
    overview TEXT,
    poster_path VARCHAR(255),
    like_count INT DEFAULT 0,
    runtime VARCHAR(50),   
    rated VARCHAR(50),     
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 6. 유저 리뷰 테이블
CREATE TABLE user_reviews (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id VARCHAR(50) NOT NULL,
    movie_id BIGINT NOT NULL,
    user_rating INT,
    violence_score INT,
    horror_score INT,   
    sexual_score INT,        
    review_content TEXT,
    tags VARCHAR(255) DEFAULT '',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (member_id, movie_id),
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 7. 유저 찜(User Cart) 테이블
CREATE TABLE user_carts (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id VARCHAR(50) NOT NULL,
    movie_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (member_id, movie_id),   -- 한 사용자가 한 영화에 대해 한 번만 찜할 수 있도록 강제
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 8. 관리자 추천 배너 테이블
CREATE TABLE admin_banner_movies (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    movie_id BIGINT NOT NULL,
    display_order INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (movie_id), -- 한 영화는 배너에 한 번만 등록 가능
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 9. 영화별 추가 통계 테이블
CREATE TABLE movie_stats (
    movie_id BIGINT PRIMARY KEY,  -- FK → movies.id
    horror_score_avg DECIMAL(3,1) DEFAULT 0.0,
    sexual_score_avg DECIMAL(3,1) DEFAULT 0.0,
    review_count INT DEFAULT 0,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 10. 배우 테이블 
CREATE TABLE actors (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    tmdb_id INT, -- 유니크 제거 
    profile_image_url VARCHAR(255),
    birthday DATE,
    deathday DATE,
    age INT,
    place_of_birth VARCHAR(255),
    biography TEXT,
    gender TINYINT,
    known_for_department VARCHAR(50)
);

-- 11. 영화-배우/감독 연결 테이블
CREATE TABLE movie_actors (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    movie_id BIGINT NOT NULL,
    actor_id BIGINT NOT NULL,
    role_name VARCHAR(100),
    role_type VARCHAR(50) DEFAULT 'ACTOR', -- '배우', '감독'
    display_order INT DEFAULT 0,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE,
    FOREIGN KEY (actor_id) REFERENCES actors(id) ON DELETE CASCADE
);

-- 12. 영화-장르 매핑 테이블 (25.07.28 coco030)
CREATE TABLE movie_genres (
    movie_id BIGINT NOT NULL,
    genre VARCHAR(50) NOT NULL,
    PRIMARY KEY (movie_id, genre), 
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

--  영화별 이미지 테이블 (갤러리용)
CREATE TABLE movie_images (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,           -- 각 이미지 고유 ID
    movie_id BIGINT NOT NULL,                       -- 어떤 영화의 이미지인지 (FK)
    image_url VARCHAR(500) NOT NULL,                -- TMDb에서 받은 이미지 경로
    type VARCHAR(50) DEFAULT 'backdrop',            -- 이미지 종류 (예: backdrop, poster, logo)
    sort_order INT DEFAULT 0,                       -- 정렬 순서
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 저장 시각
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

--  데이터 확인용 SELECT (생성 순서와 일치)
SELECT * FROM member;
SELECT * FROM movies;
SELECT * FROM user_reviews;
SELECT * FROM user_carts;
SELECT * FROM admin_banner_movies;
SELECT * FROM movie_stats;     
SELECT * FROM actors;          
SELECT * FROM movie_actors;   
SELECT * FROM movie_genres;    
SELECT * FROM movie_images; 


-- 배우들 정보 삭제 (순서대로.)
TRUNCATE TABLE movie_actors;
DELETE FROM actors;


-- ### **⭐ `like_count` 자동 업데이트를 위한 트리거 추가 ⭐**
DELIMITER //

CREATE TRIGGER trg_increase_like_count
AFTER INSERT ON user_carts
FOR EACH ROW
BEGIN
    UPDATE movies
    SET like_count = like_count + 1
    WHERE id = NEW.movie_id;
END;
//


-- user_carts에서 찜이 삭제될 때 like_count 감소
CREATE TRIGGER trg_decrease_like_count
AFTER DELETE ON user_carts
FOR EACH ROW
BEGIN
    UPDATE movies
    SET like_count = like_count - 1
    WHERE id = OLD.movie_id;
END;
//

DELIMITER ;