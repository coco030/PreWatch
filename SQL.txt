-- 1. 데이터베이스 만들기 (처음 한 번만 실행)
CREATE DATABASE IF NOT EXISTS prewatch_db
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

-- 2. 사용할 DB 선택
USE prewatch_db;

-- 3. 기존 테이블 삭제 (개발 환경에서 필요 시 사용, 배포 시 주의!)
-- ⭐ 순서 중요: FK 제약조건 때문에 자식 테이블부터 삭제해야 합니다. ⭐
DROP TABLE IF EXISTS user_reviews;
DROP TABLE IF EXISTS user_carts;
DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS member;

---

-- 4. 회원 테이블 생성
CREATE TABLE member (
    id VARCHAR(50) PRIMARY KEY,
    password VARCHAR(100) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    role VARCHAR(20) NOT NULL DEFAULT 'MEMBER'
);

INSERT INTO member (id, password, role) VALUES ('admin', '1234', 'ADMIN');
INSERT INTO member (id, password, role) VALUES ('member1', '1234', 'MEMBER');
INSERT INTO member (id, password, role) VALUES ('guest', '1234', 'MEMBER'); -- 테스트용 일반 회원 추가

-- 5. 영화 테이블 생성 (수정)

CREATE TABLE movies (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    api_id VARCHAR(255) UNIQUE,
    title VARCHAR(255) NOT NULL,
    director VARCHAR(255),
    release_date DATE,
    year INT,
    genre VARCHAR(255),
    rating DECIMAL(3, 1) DEFAULT 0.0,
    violence_score_avg DECIMAL(3, 1) DEFAULT 0.0,
    overview TEXT,
    poster_path VARCHAR(255),
    like_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


-- 6. 사용자가 작성한 게 저장되는 테이블 (user_reviews)
CREATE TABLE user_reviews (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id VARCHAR(50) NOT NULL,
    movie_id BIGINT NOT NULL,
    user_rating INT,       -- 별점 (1~10)
    violence_score INT,    -- 폭력성 점수 (1~10)
    review_content TEXT,   -- 리뷰 텍스트
    tags VARCHAR(255),     -- 태그 (쉼표로 구분된 텍스트)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (member_id, movie_id), -- 한 명의 유저는 한 영화에 대해 리뷰를 하나만 남길 수 있도록 강제
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 7. 새롭게 추가된 찜(User Cart) 테이블
CREATE TABLE user_carts (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    member_id VARCHAR(50) NOT NULL,
    movie_id BIGINT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE (member_id, movie_id), -- 한 사용자가 한 영화에 대해 한 번만 찜할 수 있도록 강제
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE,
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE
);

-- 8. 관리자 수동 추천 영화 배너 테이블 생성 (7-24 오후12:41 추가 된 코드)
CREATE TABLE admin_banner_movies ( -- (7-24 오후12:41 추가 된 코드)
    id BIGINT AUTO_INCREMENT PRIMARY KEY, -- (7-24 오후12:41 추가 된 코드)
    movie_id BIGINT NOT NULL, -- (7-24 오후12:41 추가 된 코드)
    display_order INT DEFAULT 0, -- 배너 내 표시 순서 (선택 사항) (7-24 오후12:41 추가 된 코드)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- (7-24 오후12:41 추가 된 코드)
    UNIQUE (movie_id), -- 한 영화는 배너에 한 번만 등록 가능 (7-24 오후12:41 추가 된 코드)
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE -- (7-24 오후12:41 추가 된 코드)
);

-- 데이터 확인

SELECT * FROM member;
SELECT * FROM movies;
SELECT * FROM user_reviews;
SELECT * FROM user_carts;
SELECT * FROM admin_banner_movies;

### **⭐ `like_count` 자동 업데이트를 위한 트리거 추가 ⭐**

DELIMITER //

-- user_carts에 찜이 추가될 때 like_count 증가
CREATE TRIGGER trg_increase_like_count
AFTER INSERT ON user_carts
FOR EACH ROW
BEGIN
    UPDATE movies
    SET like_count = like_count + 1
    WHERE id = NEW.movie_id;
END;
//

-- user_carts에서 찜이 삭제될 때 like_count 감소
CREATE TRIGGER trg_decrease_like_count
AFTER DELETE ON user_carts
FOR EACH ROW
BEGIN
    UPDATE movies
    SET like_count = like_count - 1
    WHERE id = OLD.movie_id;
END;
//

DELIMITER ;