-- PreWatch.sql: PreWatch 애플리케이션의 데이터베이스 스키마 및 초기 데이터를 정의하는 SQL 스크립트입니다.

-- 데이터베이스 만들기 (처음 한 번만 실행):
-- 'prewatch_db'라는 이름의 데이터베이스를 생성합니다.
-- `IF NOT EXISTS`는 이미 데이터베이스가 존재하면 오류 없이 건너뛰도록 합니다.
-- `CHARACTER SET utf8mb4`와 `COLLATE utf8mb4_unicode_ci`는 이모티콘 등 다양한 문자를 지원하기 위한 UTF-8 인코딩 설정입니다.
CREATE DATABASE IF NOT EXISTS prewatch_db
CHARACTER SET utf8mb4
COLLATE utf8mb4_unicode_ci;

-- 사용할 DB 선택:
-- 이후의 모든 SQL 명령은 'prewatch_db' 내에서 실행됩니다.
USE prewatch_db;

-- 회원 테이블 (member) 생성:
-- 애플리케이션 사용자 정보를 저장합니다.
CREATE TABLE member (
    id VARCHAR(50) PRIMARY KEY,      -- 회원의 고유 아이디. 중복 불가능하며, 기본 키로 사용됩니다. (Member.java의 id 필드와 매핑)
    password VARCHAR(100) NOT NULL,  -- 회원의 비밀번호. Null을 허용하지 않습니다. (Member.java의 password 필드와 매핑)
    status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE', -- 회원의 상태를 나타냅니다. 기본값은 'ACTIVE' (활성)입니다.
                                                  -- 'INACTIVE' (비활성)으로 변경하여 논리적 탈퇴를 구현합니다.
    role VARCHAR(20) NOT NULL DEFAULT 'MEMBER'    -- 회원의 역할(권한)을 나타냅니다. 기본값은 'MEMBER' (일반 회원)입니다.
                                                  -- 'ADMIN' (관리자) 등의 역할로 설정될 수 있습니다. (Member.java의 role 필드와 매핑)
);

-- 관리자 아이디 삽입:
-- 애플리케이션의 초기 설정을 위해 'admin' 계정을 생성하고 'ADMIN' 역할을 부여합니다.
INSERT INTO member (id, password, role) VALUES ('admin', '1234', 'ADMIN');

-- 영화 테이블 (movies) 생성:
-- 애플리케이션에서 관리할 영화 정보를 저장합니다.
CREATE TABLE movies (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,         -- 영화의 고유 ID. 자동 증가하며 기본 키입니다. (movie.java의 id 필드와 매핑)
    api_id VARCHAR(255) UNIQUE,                   -- 외부 영화 API(예: OMDb)의 고유 ID. Null 가능하며, 중복 불가능합니다.
                                                  -- 이를 통해 우리 DB의 영화와 외부 API의 영화를 연결합니다. (movie.java의 apiId 필드와 매핑)
    title VARCHAR(255) NOT NULL,                  -- 영화 제목. Null을 허용하지 않습니다. (movie.java의 title 필드와 매핑)
    director VARCHAR(255),                        -- 영화 감독 (movie.java의 director 필드와 매핑)
    release_date DATE,                            -- 영화 개봉일 (movie.java의 releaseDate 필드와 매핑)
    year INT,                                     -- 영화 개봉 연도 (movie.java의 year 필드와 매핑)
    genre VARCHAR(255),                           -- 영화 장르 (movie.java의 genre 필드와 매핑)
    rating DECIMAL(3, 1) DEFAULT 0.0,             -- 영화의 평균 만족도 별점. 0.0부터 10.0까지 소수점 첫째 자리까지 저장.
                                                  -- 기본값은 0.0입니다. (movie.java의 rating 필드와 매핑)
    violence_score_avg DECIMAL(3, 1) DEFAULT 0.0, -- 영화의 평균 잔혹도 점수. 0.0부터 10.0까지 소수점 첫째 자리까지 저장.
                                                  -- 기본값은 0.0입니다. (movie.java의 violence_score_avg 필드와 매핑)
    overview TEXT,                                -- 영화 개요/줄거리. 긴 텍스트를 저장할 수 있습니다. (movie.java의 overview 필드와 매핑)
    poster_path VARCHAR(255),                     -- 영화 포스터 이미지 파일의 경로 또는 URL. (movie.java의 posterPath 필드와 매핑)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,           -- 레코드 생성 시간. 기본값은 현재 타임스탬프입니다.
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- 레코드 마지막 업데이트 시간. 업데이트 시 자동으로 갱신됩니다.
);

-- 사용자 리뷰 테이블 (user_reviews) 생성:
-- 사용자가 작성한 영화 리뷰, 별점, 폭력성 점수, 태그 등을 저장합니다.
CREATE TABLE user_reviews (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,          -- 리뷰의 고유 ID. 자동 증가하며 기본 키입니다.
    member_id VARCHAR(50) NOT NULL,                -- 리뷰를 작성한 회원의 ID. 'member' 테이블의 'id'를 참조하는 외래 키입니다.
    movie_id BIGINT NOT NULL,                      -- 리뷰가 작성된 영화의 ID. 'movies' 테이블의 'id'를 참조하는 외래 키입니다.
    user_rating INT,                               -- 사용자가 매긴 별점 (1~10). (movie 테이블의 rating과 구분됨)
    violence_score INT,                            -- 사용자가 매긴 폭력성 점수 (1~10).
    review_content TEXT,                           -- 리뷰 내용 텍스트.
    tags VARCHAR(255),                             -- 리뷰에 추가된 태그 (쉼표로 구분된 문자열로 저장).
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,         -- 리뷰 생성 시간.
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- 리뷰 마지막 업데이트 시간.
    UNIQUE (member_id, movie_id),                  -- 한 회원은 한 영화에 대해 하나의 리뷰만 작성할 수 있도록 강제합니다.
    FOREIGN KEY (member_id) REFERENCES member(id) ON DELETE CASCADE, -- member 테이블의 id를 참조. 회원 삭제 시 해당 회원의 모든 리뷰도 자동 삭제됩니다. (ON DELETE CASCADE)
    FOREIGN KEY (movie_id) REFERENCES movies(id) ON DELETE CASCADE   -- movies 테이블의 id를 참조. 영화 삭제 시 해당 영화의 모든 리뷰도 자동 삭제됩니다. (ON DELETE CASCADE)
);

-- 데이터 확인을 위한 SELECT 문 (개발/디버깅용):
SELECT * FROM member;
SELECT * FROM movies;
SELECT * FROM user_reviews;

-- 필요할 때 테이블 지우기 (개발/테스트 환경에서 사용):
-- 외래 키 제약 조건 때문에 자식 테이블부터 삭제해야 합니다.
DROP TABLE IF EXISTS user_reviews;
DROP TABLE IF EXISTS member;
DROP TABLE IF EXISTS movies;


-- 추가할 회원 더미
INSERT INTO member (id, password) VALUES ('2', '2');
INSERT INTO member (id, password) VALUES ('3', '3');

-- 추가할 영화 더미파일
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('2', 7, 1, 2);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('2', 8, 3, 4);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('2', 9, 5, 6);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('2', 10, 7, 8);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('3', 7, 7, 1);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('3', 8, 6, 1);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('3', 9, 9, 2);
INSERT INTO user_reviews (member_id, movie_id, user_rating, violence_score) VALUES ('3', 10, 2, 1);

